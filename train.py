{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import cv2\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import tensorflow as tf\n",
    "import os\n",
    "import tensorflow as tf\n",
    "from tensorflow import reduce_sum\n",
    "from tensorflow.keras.backend import pow\n",
    "from tensorflow.keras.models import Model\n",
    "from tensorflow.keras.layers import Input, Conv2D, MaxPool2D, UpSampling2D, Concatenate, Add, Flatten\n",
    "from tensorflow.keras.losses import binary_crossentropy\n",
    "from sklearn.model_selection import train_test_split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "testdir ='data/test_images/'\n",
    "trainddir = 'data/train_images/'\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "train_df=pd.read_csv('data/train.csv').fillna(-1)\n",
    "train_df['ImageId'] = train_df.ImageId_ClassId.apply(lambda row : row.split('_')[0])\n",
    "train_df['ClassId'] = train_df.ImageId_ClassId.apply(lambda row : row.split('_')[1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "train_df['ClassId_EncodedPixels'] = train_df.apply(lambda row: (row['ClassId'], row['EncodedPixels']), axis = 1)\n",
    "grouped_EncodedPixels= train_df.groupby('ImageId')['ClassId_EncodedPixels'].apply(list)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "def rle_to_mask(rle_string,height,width):\n",
    "    '''\n",
    "    convert RLE(run length encoding) string to numpy array\n",
    "\n",
    "    Parameters: \n",
    "    rleString (str): Description of arg1 \n",
    "    height (int): height of the mask\n",
    "    width (int): width of the mask \n",
    "\n",
    "    Returns: \n",
    "    numpy.array: numpy array of the mask\n",
    "    '''\n",
    "    rows, cols = height, width\n",
    "    if rle_string == -1:\n",
    "        return np.zeros((height, width))\n",
    "    else:\n",
    "        rleNumbers = [int(numstring) for numstring in rle_string.split(' ')]\n",
    "        rlePairs = np.array(rleNumbers).reshape(-1,2)\n",
    "        img = np.zeros(rows*cols,dtype=np.uint8)\n",
    "        for index,length in rlePairs:\n",
    "            index -= 1\n",
    "            img[index:index+length] = 255\n",
    "        img = img.reshape(cols,rows)\n",
    "        img = img.T\n",
    "        return img"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "def mask_to_rle(mask):\n",
    "    '''\n",
    "    Convert a mask into RLE\n",
    "    \n",
    "    Parameters: \n",
    "    mask (numpy.array): binary mask of numpy array where 1 - mask, 0 - background\n",
    "\n",
    "    Returns: \n",
    "    sring: run length encoding \n",
    "    '''\n",
    "    pixels= mask.T.flatten()\n",
    "    pixels = np.concatenate([[0], pixels, [0]])\n",
    "    runs = np.where(pixels[1:] != pixels[:-1])[0] + 1\n",
    "    runs[1::2] -= runs[::2]\n",
    "    return ' '.join(str(x) for x in runs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7f86903a21d0>"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.countplot(train_df[train_df.EncodedPixels!=-1]['ClassId'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7f8690323da0>"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "num_defects = grouped_EncodedPixels.apply(lambda x : sum([True for i in x if i[1]!=-1]) )\n",
    "sns.countplot(num_defects)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "img_path = os.path.join(trainddir,grouped_EncodedPixels.index[0])\n",
    "img = cv2.imread(img_path)\n",
    "img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n",
    "mask = rle_to_mask(grouped_EncodedPixels[0][0][1], img.shape[0], img.shape[1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "im_m = cv2.bitwise_or(img, mask)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.image.AxesImage at 0x7f8690084e10>"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.imshow(im_m, cmap='gray')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    " class DataGenerator(tf.keras.utils.Sequence):\n",
    "    \n",
    "    def __init__(self, list_ids, labels, image_dir, batch_size=32, img_h=256,img_w=512,shuffle=True, channels=1 ):\n",
    "        self.list_ids = list_ids\n",
    "        self.labels = labels\n",
    "        self.image_dir = image_dir\n",
    "        self.batch_size = batch_size\n",
    "        self.img_h = img_h\n",
    "        self.img_w = img_w\n",
    "        self.channels = channels\n",
    "        self.shuffle = shuffle\n",
    "        self.on_epoch_end()\n",
    "\n",
    "    def __len__(self):\n",
    "        return int(np.floor(len(self.list_ids)) / self.batch_size)\n",
    "    \n",
    "    def on_epoch_end(self):\n",
    "        self.indexes = np.arange(len(self.list_ids))\n",
    "        if self.shuffle:\n",
    "            np.random.shuffle(self.indexes)\n",
    "\n",
    "    def __data_generation(self, list_ids_temp):\n",
    "\n",
    "        X = np.empty((self.batch_size, self.img_h, self.img_w, self.channels))\n",
    "        y = np.empty((self.batch_size, self.img_h, self.img_w, 4))\n",
    "\n",
    "        for i, Id in enumerate(list_ids_temp):\n",
    "\n",
    "            path = os.path.join(self.image_dir, Id)\n",
    "            image = cv2.imread(path,0)\n",
    "            image_resized = cv2.resize(image, (self.img_w,self.img_h))\n",
    "            image_resized = np.array(image_resized, dtype=np.float64)\n",
    "\n",
    "            #             normalise\n",
    "            image_resized -= image_resized.mean()\n",
    "            image_resized /= image_resized.std()\n",
    "\n",
    "            mask = np.empty((self.img_h,self.img_w,4))\n",
    "\n",
    "            height_org, width_org = image.shape\n",
    "\n",
    "            for j, img_class in enumerate(['1','2','3','4']):\n",
    "\n",
    "                rle = self.labels.get(Id + '_' + img_class)\n",
    "\n",
    "                if rle is None:\n",
    "                    class_mask = np.zeros((width_org,height_org))\n",
    "                else:\n",
    "                    class_mask = rle_to_mask(rle,height_org, width_org)\n",
    "\n",
    "                class_mask_resized = cv2.resize(class_mask, (self.img_w,self.img_h))\n",
    "\n",
    "                mask[... , j] = class_mask_resized\n",
    "\n",
    "            X[i,] = np.expand_dims(image_resized, axis=2)\n",
    "            y[i,] = mask\n",
    "\n",
    "        y = (y > 0).astype(int)\n",
    "\n",
    "        return X , y\n",
    "        \n",
    "    def __getitem__(self, index):\n",
    "        indexes = self.indexes[index*self.batch_size:(index+1)*self.batch_size]\n",
    "        # get list of IDs\n",
    "        list_ids_temp = [self.list_ids[k] for k in indexes]\n",
    "        # generate data\n",
    "\n",
    "\n",
    "        X, y = self.__data_generation(list_ids_temp)\n",
    "        return X, y                          "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "masks = {}\n",
    "for index, row in train_df[train_df['EncodedPixels']!=-1].iterrows():\n",
    "    masks[row['ImageId_ClassId']] = row['EncodedPixels']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "train_image_ids = train_df['ImageId'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "img_h = 256\n",
    "img_w = 800\n",
    "params ={'img_h' : img_h,\n",
    "        'img_w': img_w,\n",
    "        'batch_size': 32,\n",
    "        'image_dir':trainddir,\n",
    "        'shuffle':True}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "train_gen = DataGenerator(train_image_ids,masks, **params)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "X, y = train_gen.__getitem__(2)\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The shape of X is (32, 256, 800, 1)\n",
      "The shape of y is (32, 256, 800, 4)\n"
     ]
    }
   ],
   "source": [
    "print('The shape of X is {}'.format(X.shape))\n",
    "print('The shape of y is {}'.format(y.shape))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Unet: https://arxiv.org/pdf/1505.04597.pdf\n",
    "\n",
    "def conv_block(x, filters, max_pool=True):\n",
    "    \n",
    "    if max_pool:\n",
    "        x=MaxPool2D(pool_size=(2,2))(x)\n",
    "\n",
    "    x = Conv2D(filters=filters,kernel_size=3, activation='relu', padding='same')(x)\n",
    "    x = Conv2D(filters=filters,kernel_size=3, activation='relu', padding='same')(x)\n",
    "    \n",
    "    return x\n",
    "\n",
    "def conv_concatanate(x, shortcut, filters):\n",
    "    \n",
    "    x = Concatenate()([x,shortcut])\n",
    "    x = conv_block(x, filters=filters, max_pool=False)\n",
    "    return x\n",
    "\n",
    "def up_conv_block(x, shortcut, filters):\n",
    "    \n",
    "    x = UpSampling2D(size=(2,2))(x)\n",
    "    x = Conv2D(filters=filters,kernel_size=2, activation='relu', padding='same')(x)\n",
    "    x = conv_concatanate(x,shortcut, filters)\n",
    "    return x\n",
    "\n",
    "def conv_out(x, output_filters):\n",
    "    x = Conv2D(filters=output_filters,kernel_size=1, activation='sigmoid', padding='same')(x)\n",
    "    return x\n",
    "\n",
    "\n",
    "def unet(input_size,num_output_masks,init_filters=64):\n",
    "\n",
    "    x = Input(input_size)\n",
    "    \n",
    "    conv_down1 = conv_block(x,init_filters, max_pool=False)\n",
    "    \n",
    "    conv_down2 = conv_block(conv_down1, init_filters*2)\n",
    "    conv_down3 = conv_block(conv_down2, init_filters*4)\n",
    "    conv_down4 = conv_block(conv_down3, init_filters*6)\n",
    "    \n",
    "    conv_down5 = conv_block(conv_down4, init_filters*8)\n",
    "    \n",
    "    conv_up1 = up_conv_block(conv_down5, conv_down4,init_filters*6)\n",
    "    conv_up2 = up_conv_block(conv_up1, conv_down3,init_filters*4)\n",
    "    conv_up3 = up_conv_block(conv_up2, conv_down2,init_filters*2)\n",
    "    \n",
    "    conv_up4 = up_conv_block(conv_up3, conv_down1,init_filters)\n",
    "    \n",
    "    output = conv_out(conv_up4,num_output_masks)\n",
    "    \n",
    "    model = Model(x, output)\n",
    "    \n",
    "    return model "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "model = unet((img_h,img_w,1), num_output_masks=4)\n",
    "optimizer = tf.optimizers.Adam(learning_rate=0.05)\n",
    "loss = binary_crossentropy\n",
    "model.compile(optimizer=optimizer,loss=loss, metrics=[loss])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "history= model.fit_generator(generator=train_gen, epochs=1, verbose=True )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
